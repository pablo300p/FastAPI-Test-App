from passlib.context import CryptContext

# Set the hashing algorithm configuration
# 'bcrypt' is a secure and popular password hashing algorithm
# 'deprecated="auto"' ensures any older, less secure algorithms are automatically updated to newer ones
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Function to hash the password for secure storage in the database
# Input: password (plain text password to be hashed)
# Output: hashed password (string generated by the bcrypt hashing algorithm)
def hash(password: str):
    return pwd_context.hash(password)

# Function to verify that a plain text password matches the stored hashed password
# Inputs:
#   - plain_password: the password provided by the user (plain text)
#   - hashed_password: the password stored in the database (hashed)
# Output: True if the passwords match, otherwise False
def verify(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)
