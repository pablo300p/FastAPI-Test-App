AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for FastAPI app with EC2, RDS PostgreSQL, and Application Load Balancer

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for FastAPI application

  DBUsername:
    Type: String
    Default: admin
    Description: PostgreSQL Database Username

  DBPassword:
    Type: String
    Description: PostgreSQL Database Password
    NoEcho: true

  DBName:
    Type: String
    Default: fastapidb
    Description: PostgreSQL Database Name

Resources:
  FastApiInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and RDS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  FastApiInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups: 
        - !Ref FastApiInstanceSecurityGroup
      ImageId: ami-0c55b159cbfafe1f0  # Update with an Amazon Linux or Ubuntu AMI for us-east-2
      KeyName: my-key-pair  # Replace with your EC2 KeyPair
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y python3-pip
          pip3 install fastapi uvicorn psycopg2-binary
          # Export environment variables
          export DATABASE_HOSTNAME=your-db-hostname
          export DATABASE_PORT=5432
          export DATABASE_PASSWORD=!Ref DBPassword
          export DATABASE_NAME=!Ref DBName
          export DATABASE_USERNAME=!Ref DBUsername
          export SECRET_KEY=your-secret-key
          export ALGORITHM=HS256
          export ACCESS_TOKEN_EXPIRE_MINUTES=30
          # Clone your app repository and start FastAPI
          git clone https://github.com/pablo300p/test-fastapi
          cd fastapi-app
          uvicorn main:app --host 0.0.0.0 --port 80

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow database access from EC2 instance
      VpcId: !Ref "AWS::VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt FastApiInstanceSecurityGroup.GroupId

  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 20
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: FastApiLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-12345abc  # Update with your subnets

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FastApiTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref "AWS::VpcId"
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

Outputs:
  FastApiEC2PublicIP:
    Description: Public IP of FastAPI EC2 instance
    Value: !GetAtt FastApiInstance.PublicIp
